cmake_minimum_required(VERSION 3.1)
PROJECT(snycommon)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)

IF( NOT CMAKE_BUILD_TYPE )
   SET( CMAKE_BUILD_TYPE debug ... FORCE )
ENDIF()

SET(BUILD_MODE_DIR ".")
IF (WIN32)
  IF(CMAKE_BUILD_TYPE MATCHES debug)
    message("Debug build.")
    SET(BUILD_MODE_DIR "Debug")
  ELSEIF(CMAKE_BUILD_TYPE MATCHES release)
    message("Release build.")
    SET(BUILD_MODE_DIR "Release")
  ELSE()
    MESSAGE(FATAL_ERROR  "Unkown Build Type, It should be either debug or release")
  ENDIF()
ENDIF()

SET(VS_DIR ".")
IF (WIN32)
    MESSAGE(STATUS "Now is windows")
    SET(VS_DIR "win")
ELSEIF (APPLE)
    MESSAGE(STATUS "Now is Apple systens.")
ELSEIF (UNIX)
    MESSAGE(STATUS "Now is UNIX-like OS's.")
ELSE()
    MESSAGE(FATAL_ERROR  "Unkown OS")
ENDIF ()

# Variables
SET(SOURCE_SRC   ${CMAKE_CURRENT_SOURCE_DIR}/src)

#OpenSSL
SET(OPENSSL_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/openssl/${BUILD_MODE_DIR})
find_package(OpenSSL REQUIRED)
#Bento4
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/${BUILD_MODE_DIR}/include/MetaData)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/${BUILD_MODE_DIR}/include/Crypto)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/${BUILD_MODE_DIR}/include/Core)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/${BUILD_MODE_DIR}/include/Codecs)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/${BUILD_MODE_DIR}/include/Adapters)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/${BUILD_MODE_DIR}/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/Bento4/lib/${BUILD_MODE_DIR})
#rapidjson
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/rapidjson/include)
#easyloggingpp
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/easyloggingpp/include COMMON_SOURCES)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/easyloggingpp/include)
ADD_DEFINITIONS(-DAUTO_INITIALIZE_EASYLOGGINGPP)
ADD_DEFINITIONS(-DELPP_THREAD_SAFE)
#libuv
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/libuv/${BUILD_MODE_DIR}/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/libuv/${BUILD_MODE_DIR}/lib)
#uv-cpp
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/uv-cpp/${BUILD_MODE_DIR}/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/uv-cpp/${BUILD_MODE_DIR}/lib)
#ffmpeg
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/ffmpeg/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/${VS_DIR}/ffmpeg/lib)
#gpac
#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/gpac/include)
#LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/gpac/lib)
#jwt
#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/git-submodule/jwt-cpp/include)
ADD_DEFINITIONS(-D_HAS_STD_BYTE=0)
ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)
#ADD_DEFINITIONS(-D_WINSOCKAPI_) 

INCLUDE_DIRECTORIES(${SOURCE_SRC})

AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/core COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/utils COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/flv COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/rtmp COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/nalu COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/h264 COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/h265 COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/aac COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/transcode COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/transcode/codec COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/transcode/filter COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/source/rtmp COMMON_SOURCES)

ADD_LIBRARY(snycommon STATIC ${COMMON_SOURCES})
TARGET_LINK_LIBRARIES(snycommon OpenSSL::SSL)
TARGET_LINK_LIBRARIES(snycommon OpenSSL::Crypto)
TARGET_LINK_LIBRARIES(snycommon Bento4)
TARGET_LINK_LIBRARIES(snycommon uv_cpp)
TARGET_LINK_LIBRARIES(snycommon avcodec)
TARGET_LINK_LIBRARIES(snycommon avfilter)
TARGET_LINK_LIBRARIES(snycommon avformat)
TARGET_LINK_LIBRARIES(snycommon avutil)