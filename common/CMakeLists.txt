cmake_minimum_required(VERSION 3.1)
PROJECT(streamingnology_common_library)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# Variables
SET(SOURCE_SRC   ${CMAKE_CURRENT_SOURCE_DIR}/src)

#OpenSSL
SET(OPENSSL_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/openssl)
find_package(OpenSSL REQUIRED)
#Bento4
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/MetaData)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Crypto)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Core)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Codecs)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Adapters)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/lib)
#rapidjson
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/rapidjson/include)
#easyloggingpp
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/easyloggingpp/lib)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/easyloggingpp/include COMMON_SOURCES)
#libuv
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/libuv/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/libuv/lib)
#uv-cpp
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/uv-cpp/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/uv-cpp/lib)
#ffmpeg
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/ffmpeg/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/ffmpeg/lib)
#gpac
#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/gpac/include)
#LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/gpac/lib)
#jwt
#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/git-submodule/jwt-cpp/include)

INCLUDE_DIRECTORIES(${SOURCE_SRC})

AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/core COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/utils COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/flv COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/rtmp COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/nalu COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/h264 COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/h265 COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/bitstream/aac COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/transcode COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/transcode/codec COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/media/transcode/filter COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SRC}/source/rtmp COMMON_SOURCES)

ADD_DEFINITIONS(-DELPP_THREAD_SAFE)

ADD_LIBRARY(snycommon SHARED ${COMMON_SOURCES})
TARGET_LINK_LIBRARIES(snycommon OpenSSL::SSL)
TARGET_LINK_LIBRARIES(snycommon OpenSSL::Crypto)
TARGET_LINK_LIBRARIES(snycommon ap4)
TARGET_LINK_LIBRARIES(snycommon uv pthread)
TARGET_LINK_LIBRARIES(snycommon uv_cpp)
TARGET_LINK_LIBRARIES(snycommon easyloggingpp)
TARGET_LINK_LIBRARIES(snycommon avcodec)
TARGET_LINK_LIBRARIES(snycommon avfilter)
TARGET_LINK_LIBRARIES(snycommon avformat)
TARGET_LINK_LIBRARIES(snycommon avutil)
