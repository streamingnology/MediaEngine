cmake_minimum_required(VERSION 2.8)
PROJECT(streamingnology_common_library)
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)

ADD_DEFINITIONS(-DELPP_THREAD_SAFE)

# Variables
SET(SOURCE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src)
SET(SOURCE_CORE ${SOURCE_SRC}/core)
SET(SOURCE_MEDIA ${SOURCE_SRC}/media)
SET(SOURCE_SYSTEM ${SOURCE_SRC}/system)
SET(SOURCE_UTILS ${SOURCE_SRC}/utils)
SET(SOURCE_HTTP ${SOURCE_SRC}/http)

#OpenSSL
#SET(OPENSSL_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/openssl)
#find_package(OpenSSL REQUIRED)
#Bento4
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/MetaData)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Crypto)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Core)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Codecs)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/Adapters)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/include/C++/)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/Bento4/lib)
#gpac
#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/gpac/include)
#LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/gpac/lib)
#rapidjson
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/rapidjson/include)
#jwt
#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/git-submodule/jwt-cpp/include)
#easyloggingpp
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/easyloggingpp/lib)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/3rd/build/easyloggingpp/include COMMON_SOURCES)

#common src
INCLUDE_DIRECTORIES(${SOURCE_SRC})

AUX_SOURCE_DIRECTORY(${SOURCE_CORE} COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_HTTP} COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_MEDIA} COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_SYSTEM} COMMON_SOURCES)
AUX_SOURCE_DIRECTORY(${SOURCE_UTILS} COMMON_SOURCES)

ADD_LIBRARY(snycommon SHARED ${COMMON_SOURCES})
#TARGET_LINK_LIBRARIES(snycommon OpenSSL::SSL)
#TARGET_LINK_LIBRARIES(snycommon OpenSSL::Crypto)
TARGET_LINK_LIBRARIES(snycommon ap4)
#TARGET_LINK_LIBRARIES(snycommon gpac)
TARGET_LINK_LIBRARIES(snycommon easyloggingpp)
