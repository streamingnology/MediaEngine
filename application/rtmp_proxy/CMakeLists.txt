cmake_minimum_required(VERSION 3.1)
PROJECT(app_rtmp_proxy)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)

set(CMAKE_MACOSX_RPATH 1)
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

IF( NOT CMAKE_BUILD_TYPE )
   SET( CMAKE_BUILD_TYPE debug ... FORCE )
ENDIF()

SET(BUILD_MODE_DIR ".")
IF (WIN32)
  IF(CMAKE_BUILD_TYPE MATCHES debug)
    message("Debug build.")
    SET(BUILD_MODE_DIR "Debug")
  ELSEIF(CMAKE_BUILD_TYPE MATCHES release)
    message("Release build.")
    SET(BUILD_MODE_DIR "Release")
  ELSE()
    MESSAGE(FATAL_ERROR  "Unkown Build Type, It should be either debug or release")
  ENDIF()
ENDIF()

# Variables
SET(RTMPPROXY_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(COMMON ${RTMPPROXY_DIR}/../../common)
SET(COMMON_SRC ${RTMPPROXY_DIR}/../../common/src)
SET(THIRD_BUILD_DIR ${RTMPPROXY_DIR}/../../common/3rd/build)

#Bento4
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/Bento4/${BUILD_MODE_DIR}/include/C++/MetaData)
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/Bento4/${BUILD_MODE_DIR}/include/C++/Crypto)
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/Bento4/${BUILD_MODE_DIR}/include/C++/Core)
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/Bento4/${BUILD_MODE_DIR}/include/C++/Codecs)
LINK_DIRECTORIES(${THIRD_BUILD_DIR}/Bento4/${BUILD_MODE_DIR}/lib)
#OpenSSL
SET(OPENSSL_ROOT_DIR ${THIRD_BUILD_DIR}/openssl/${BUILD_MODE_DIR})
FIND_PACKAGE(OpenSSL REQUIRED)
#rapidjson
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/rapidjson/include)
#easyloggingpp
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/easyloggingpp/include)
ADD_DEFINITIONS(-DAUTO_INITIALIZE_EASYLOGGINGPP)
ADD_DEFINITIONS(-DELPP_THREAD_SAFE)
#libuv
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/libuv/${BUILD_MODE_DIR}/include)
LINK_DIRECTORIES(${THIRD_BUILD_DIR}/libuv/${BUILD_MODE_DIR}/lib)
#uv-cpp
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/uv-cpp/${BUILD_MODE_DIR}/include)
LINK_DIRECTORIES(${THIRD_BUILD_DIR}/uv-cpp/${BUILD_MODE_DIR}/lib)
#ffmpeg
INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/ffmpeg/include)
LINK_DIRECTORIES(${THIRD_BUILD_DIR}/ffmpeg/lib)
#gpac
#INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/gpac/include)
#LINK_DIRECTORIES(${THIRD_BUILD_DIR}/gpac/lib)
#jwt
#INCLUDE_DIRECTORIES(${THIRD_BUILD_DIR}/common/3rd/git-submodule/jwt-cpp/include)

INCLUDE_DIRECTORIES(${RTMPPROXY_DIR}/src)
INCLUDE_DIRECTORIES(${COMMON_SRC})

ADD_SUBDIRECTORY(${COMMON} ${COMMON}/build)

ADD_DEFINITIONS(-D_HAS_STD_BYTE=0)
ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN) 
# RTMPProxy 
AUX_SOURCE_DIRECTORY(${RTMPPROXY_DIR}/src RTMPPROXY_SOURCES)

ADD_EXECUTABLE(app_rtmp_proxy ${RTMPPROXY_SOURCES})
TARGET_LINK_LIBRARIES(app_rtmp_proxy snycommon)
